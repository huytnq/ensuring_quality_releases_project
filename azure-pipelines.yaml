name: Azure Pipelines
variables:
  python.version: '3.7.6'
stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          terraform init
          terraform plan
          terraform apply -auto-approve
        workingDirectory: './terraform'
    # Needed for Terraform VM deployment
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: '.ssh/id_rsa.pub'
        sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC8CrqP6Rpq3Bg3CBKepD+9d0CduFpjn6m4S3qh+5bB3NnEpv9j9I5IXuoWbbGSpFDLGn42qcIm4KGaZoUmg48eCkSZrdHCOZVBF+qrYVDzPOWkIIIbzpfnEWN4bIUVZcQSRt80iBe5vR0o6XXSxK9PDqucflD1hjbgl8ZsWDNDnI23jc0H/dp9EsjmiYW+fQgbgUQroW7wX94MFX0NOILAY+R63JrMNr2TWglbww6+N0zSAFrnJPH/dObzCuyo8djBpVflIauF6f5osP/qlJuIpGKJ2oA1pfGDgc8XJNzPZtorr+yMzlIOtDSZYJmp1tqJTEw6Ki0RTHDuAKv0/Zp3fOX1w0Tr/DZOL+4Fhl+AaYmI8gx5nXQOQDsuB1tmG/w/bWclWdct3m3VlaLE9qIIDGuEuEEEVE/okb0cE2vT8bgzyGLqpTgFKAkklFs6axJQo2DxVCqAz0y/J13iUwQkKDkRQcj1nO6qCsUQ+58z9CTWyB+rjLrdLdLBDZ2A2qE= admins@DESKTOP-K32FQ05'
        sshKeySecureFile: 'id_rsa'
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: './automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: './/automatedtesting'
        artifact: 'automatedtesting'
        publishLocation: 'pipeline'

  - job: Postman
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: 'sudo npm install -g newman'
        workingDirectory: $(System.DefaultWorkingDirectory)
    - task: CmdLine@2
      displayName: Run Regression Tests
      continueOnError: true
      inputs:
        script: 'newman run StarterAPIs.json  --reporters cli,junit --reporter-junit-export junit-report.xml'

        workingDirectory: './automatedtesting/postman'
    - task: PublishTestResults@2
      displayName: 'Publish Test Results for postman'
      inputs:
       testResultsFormat: 'JUnit'
       testResultsFiles: '**/*.xml'
       mergeTestResults: true
       failTaskOnFailedTests: false
- stage:
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'Azure subscription 1(32bee463-1a01-463c-8760-52350742cd79)'
              appType: 'webApp'
              appName: 'web-AppService-web'
              package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
              deploymentMethod: 'auto'
          - task: JMeterInstaller@0
            inputs:
              jmeterVersion: '5.4.2'
          - task: TaurusInstaller@0
            inputs:
              taurusVersion: '1.15.3'
              pythonCommand: 'python3'
          - task: TaurusRunner@0
            inputs:
              taurusConfig: |
                execution:
                - scenario:
                    # You can also reference a JMeter test plan (recommended)
                    script: $(Pipeline.Workspace)/automatedtesting/jmeter/Starter.jmx
                  concurrency: 5
                  iterations: 10
                  ramp-up: 2s
                
                reporting:
                - module: junit-xml
                  filename: taurus-output/TEST-Taurus.xml
              jmeterHome: '$(JMeterInstaller.JMeterHome)'
              jmeterPath: '$(JMeterInstaller.JMeterPath)'
              jmeterVersion: '$(JMeterInstaller.JMeterVersion)'
              outputDir: 'taurus-output'
  - deployment: VMDeploy
    displayName: web
    environment:
      name:  TEST
      resourceType: VirtualMachine
      tags: web
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                
                sudo apt-get upgrade -y
                sudo apt-get install python3 -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                sudo apt-get install chromium-chromedriver -y
                pip3 install selenium
                echo 'export PATH=$PATH:/path/to/driver' >> ~/.bash_profile
                source ~/.bash_profile
                
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                # Run selenium
                
                git clone https://HuyTNQ1:7fyuuljzptjm5m4vuy4nfjpgy56pim4hlkrnmqbwfeihn23darjq@dev.azure.com/HuyTNQ1/udacity_project3_ensuring_quality_releases/_git/udacity_project3_ensuring_quality_releases
                cd udacity_project3_ensuring_quality_releases/
                git pull
                cd automatedtesting/selenium
                python3 login.py


